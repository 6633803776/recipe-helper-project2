from typing import List, Tuple, Dict, Any
import sqlite3
import json
import requests
from collections import defaultdict
import re


class DataStore:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite"""

    def __init__(self, db_name="recipes.db"):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á favorites ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        self.cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY,
                title TEXT,
                ingredients_json TEXT
            )
            """
        )
        self.conn.commit()

    def save_favorite(
        self,
        recipe_id: int,
        title: str,
        ingredients: List[str]
    ) -> bool:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
        (‡πÉ‡∏ä‡πâ INSERT OR REPLACE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏≤‡∏Å ID ‡∏ã‡πâ‡∏≥)"""

        ingredients_str = json.dumps(ingredients)
        try:
            self.cursor.execute(
                "INSERT OR REPLACE INTO favorites "
                "(id, title, ingredients_json) VALUES (?, ?, ?)",
                (recipe_id, title, ingredients_str)
            )
            self.conn.commit()
            return True
        except Exception as e:
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Docstring ‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 79 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            print(f"Database Save Error: {e}")
            return False

    def get_favorites(self) -> List[Tuple[int, str, str]]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á Tuple)"""
        self.cursor.execute(
            "SELECT id, title, ingredients_json FROM favorites"
        )
        return self.cursor.fetchall()

    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        self.conn.close()

    # üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô delete_favorite ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å close() ‡πÅ‡∏•‡πâ‡∏ß
    def delete_favorite(self, recipe_id: int) -> bool:
        """‡∏•‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            self.cursor.execute(
                "DELETE FROM favorites WHERE id = ?",
                (recipe_id,)
            )
            self.conn.commit()
            return True
        except Exception as e:
            print(f"Database Delete Error: {e}")
            return False


class RecipeFinder:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö Spoonacular API"""

    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.spoonacular.com/recipes/"

    def _make_request(
        self,
        endpoint: str,
        params: Dict[str, Any]
    ) -> Dict[str, Any]:
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""

        params['apiKey'] = self.api_key
        try:
            # ‡∏ó‡∏≥ GET request
            response = requests.get(
                f"{self.base_url}{endpoint}",
                params=params
            )

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP status code (‡πÄ‡∏ä‡πà‡∏ô 404, 500)
            response.raise_for_status()

            return response.json()
        except requests.exceptions.HTTPError as e:
            # ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ f-string ‡∏™‡∏±‡πâ‡∏ô‡πÜ
            status = e.response.status_code if e.response is not None \
                else 'Unknown'
            print(f"‚ùå HTTP Error: {status} - API Key ‡∏´‡∏£‡∏∑‡∏≠ Limit ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Connection Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡πÑ‡∏î‡πâ: {e}")
        return {}

    def search_by_ingredient(
        self,
        ingredient: str
    ) -> List[Dict[str, Any]]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        params = {
            "ingredients": ingredient,
            "number": 5  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏Ñ‡πà 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        }
        results = self._make_request("findByIngredients", params)
        # API ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List ‡∏´‡∏£‡∏∑‡∏≠ Dict (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error)
        return results if isinstance(results, list) else []

    def get_recipe_details(self, recipe_id: int) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£"""
        endpoint = f"{recipe_id}/information"
        params = {"includeNutrition": "false"}
        data = self._make_request(endpoint, params)

        if data:
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏î‡∏¥‡∏° (original) ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏π‡∏ï‡∏£
            ingredients = [
                item['original']
                for item in data.get('extendedIngredients', [])
            ]
            return {
                "title": data.get("title"),
                "ingredients": ingredients
            }
        return {}


class GroceryList:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á"""

    def __init__(self, datastore: DataStore):
        self.datastore = datastore

    def build_list(self) -> Dict[str, int]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÇ‡∏õ‡∏£‡∏î"""
        favorites = self.datastore.get_favorites()
        shopping_list: Dict[str, int] = defaultdict(int)

        if not favorites:
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Dict ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡πÇ‡∏õ‡∏£‡∏î
            return {}

        for _, _, ingredients_json in favorites:
            ingredients = json.loads(ingredients_json)

            for item_full in ingredients:
                # 1. ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô, ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                item_normalized = re.sub(
                    r'(\d+\s*[\/|\.]*\d*|\d)', '', item_full, 1
                ).strip()
                item_normalized = re.sub(
                    r'(cup|teaspoon|tablespoon|tsp|tbsp|oz|g|kg|ml|l|pound|lb)'
                    r's?\b',
                    '',
                    item_normalized,
                    flags=re.IGNORECASE
                ).strip()

                # 2. ‡∏•‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                final_item = (
                    item_normalized.lower()
                    .replace('of', '').replace('and', '')
                    .replace(',', '').strip()
                )

                # 3. ‡∏ô‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                if final_item:
                    shopping_list[final_item] += 1

        return shopping_list

    def display_list(self, shopping_list: Dict[str, int]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á"""
        if not shopping_list:
            print(
                "üí° ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ / "
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤"
            )
            return

        print("\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô üõí ===")
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        for item, count in sorted(shopping_list.items()):
            # ‡πÉ‡∏ä‡πâ .title() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
            print(f"‚Ä¢ {item.title()}")
        print("================================")
