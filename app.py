from flask import Flask, render_template, request, redirect, url_for, g
from recipe_helper import DataStore, RecipeFinder, GroceryList
from typing import Dict, Any

# üö® ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ API KEY
API_KEY = "3d590967e60048a6887dfd1866830566"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask App
app = Flask(__name__)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Global (Finder ‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏Å‡∏±‡∏ö DB ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Threading)
finder = RecipeFinder(API_KEY)


# -------------------------------------------------------------
# 1. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Application Context (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Threading)
# -------------------------------------------------------------
def get_db():
    if 'db' not in g:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataStore Instance ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô g
        g.db = DataStore("recipes.db")
    return g.db

def get_grocery_helper(ds):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á GroceryList Instance ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ DataStore ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if 'grocery_helper' not in g:
        g.grocery_helper = GroceryList(ds)
    return g.grocery_helper

@app.teardown_appcontext
def close_connection(exception):
    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡πÅ‡∏•‡∏∞‡∏•‡∏ö Instance ‡∏Ç‡∏≠‡∏á GroceryList ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Request ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á
    db = g.pop('db', None)
    g.pop('grocery_helper', None)
    if db is not None:
        db.close()


# -------------------------------------------------------------
# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Homepage)
# -------------------------------------------------------------
@app.route('/', methods=['GET', 'POST'])
def index():
    recipes = []
    query = ""

    if request.method == 'POST':
        query = request.form.get('ingredient')
        if query:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Logic ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô RecipeFinder
            results_from_api = finder.search_by_ingredient(query)

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Template ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
            recipes = [
                {'id': r['id'], 'title': r['title']}
                for r in results_from_api
            ]

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå HTML 'index.html'
    return render_template('index.html', recipes=recipes, query=query)


# -------------------------------------------------------------
# 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÇ‡∏õ‡∏£‡∏î
# -------------------------------------------------------------
@app.route('/favorite/<int:recipe_id>')
def favorite(recipe_id):
    ds = get_db() # üö® ‡πÉ‡∏ä‡πâ get_db() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á DB
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å API
    recipe_info: Dict[str, Any] = finder.get_recipe_details(recipe_id)

    if recipe_info and recipe_info.get('title'):
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Logic ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏ô DataStore
        ds.save_favorite(recipe_id,
                         recipe_info['title'],
                         recipe_info['ingredients'])

    # Redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    return redirect(url_for('index'))


# -------------------------------------------------------------
# 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á
# -------------------------------------------------------------
@app.route('/grocery')
def show_grocery_list():
    ds = get_db() # üö® ‡πÉ‡∏ä‡πâ get_db() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á DB
    
    # ‡πÉ‡∏ä‡πâ DataStore ‡πÉ‡∏ô Context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á GroceryList
    grocery_helper = get_grocery_helper(ds)
    
    # ‡∏î‡∏∂‡∏á‡∏™‡∏π‡∏ï‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏à‡∏≤‡∏Å Logic ‡πÉ‡∏ô DataStore)
    favorites = ds.get_favorites()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á (‡∏à‡∏≤‡∏Å Logic ‡πÉ‡∏ô GroceryList)
    shopping_list_dict = grocery_helper.build_list()

    # ‡πÅ‡∏õ‡∏•‡∏á Dictionary ‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô HTML
    shopping_list = sorted(list(shopping_list_dict.keys()))

    return render_template(
        'favorites.html',
        favorites=favorites,
        shopping_list=shopping_list
    )


# -------------------------------------------------------------
# 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
# -------------------------------------------------------------
@app.route('/recipe/<int:recipe_id>')
def view_recipe(recipe_id):
    recipe_info = finder.get_recipe_details(recipe_id)
    
    # üö® ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á ID ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Favorite ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    if recipe_info:
        recipe_info['id'] = recipe_id
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô template ‡πÉ‡∏´‡∏°‡πà
        return render_template('recipe_detail.html', info=recipe_info)

    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£", 404




# -------------------------------------------------------------
# 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏•‡∏ö‡∏™‡∏π‡∏ï‡∏£‡πÇ‡∏õ‡∏£‡∏î
# -------------------------------------------------------------
@app.route('/delete/<int:recipe_id>', methods=['POST']) 
def delete_favorite_route(recipe_id):
    ds = get_db()
    # üö® ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç delete_favorite ‡πÉ‡∏ô recipe_helper.py ‡πÅ‡∏•‡πâ‡∏ß
    ds.delete_favorite(recipe_id) 
    # Redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Grocery List
    return redirect(url_for('show_grocery_list')) 
# ...


# -------------------------------------------------------------
# 7. ‡∏£‡∏±‡∏ô Web Server
# -------------------------------------------------------------
if __name__ == '__main__':
    # ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ threaded=False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SQLite Threading
    app.run(debug=True, threaded=False)
